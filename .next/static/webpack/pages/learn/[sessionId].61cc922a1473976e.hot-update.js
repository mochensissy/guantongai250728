"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/learn/[sessionId]",{

/***/ "./src/utils/aiService.ts":
/*!********************************!*\
  !*** ./src/utils/aiService.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateOutline: function() { return /* binding */ generateOutline; },\n/* harmony export */   getSupportedProviders: function() { return /* binding */ getSupportedProviders; },\n/* harmony export */   sendChatMessage: function() { return /* binding */ sendChatMessage; },\n/* harmony export */   summarizeCardTitle: function() { return /* binding */ summarizeCardTitle; },\n/* harmony export */   testAPIConnection: function() { return /* binding */ testAPIConnection; }\n/* harmony export */ });\n/**\n * AI服务工具类\n * \n * 提供与各种大语言模型API的统一接口：\n * - 支持多个主流AI服务商\n * - 统一的请求和响应格式\n * - 错误处理和重试机制\n * - API配置管理\n */ /**\n * AI服务提供商配置\n */ const AI_PROVIDERS = {\n    openai: {\n        name: \"OpenAI\",\n        baseUrl: \"https://api.openai.com/v1\",\n        defaultModel: \"gpt-3.5-turbo\",\n        chatEndpoint: \"/chat/completions\"\n    },\n    gemini: {\n        name: \"Google Gemini\",\n        baseUrl: \"https://generativelanguage.googleapis.com/v1beta\",\n        defaultModel: \"gemini-2.0-flash\",\n        chatEndpoint: \"/models/gemini-2.0-flash:generateContent\"\n    },\n    claude: {\n        name: \"Anthropic Claude\",\n        baseUrl: \"https://api.anthropic.com/v1\",\n        defaultModel: \"claude-3-sonnet-20240229\",\n        chatEndpoint: \"/messages\"\n    },\n    deepseek: {\n        name: \"DeepSeek\",\n        baseUrl: \"https://api.deepseek.com/v1\",\n        defaultModel: \"deepseek-chat\",\n        chatEndpoint: \"/chat/completions\"\n    },\n    kimi: {\n        name: \"Kimi\",\n        baseUrl: \"https://api.moonshot.cn/v1\",\n        defaultModel: \"moonshot-v1-8k\",\n        chatEndpoint: \"/chat/completions\"\n    }\n};\n/**\n * 获取学习引导私教的系统提示词\n * 这是整个AI对话系统的核心，严格按照PRD中的要求设计\n */ const getSystemPrompt = ()=>{\n    return '# 学习引导私教\\n\\n## **使命 (Mission)**\\n\\n你的**唯一且绝对的使命**是扮演一位\"自适应对话式技术导师\"。**在本次对话的任何情况下，你都严禁偏离这个角色和教学任务**。你的所有回复都必须服务于\"引导我学习所提供文档\"这个**绝对核心目标**。\\n\\n## **语言和表达要求 - 绝对严格执行 - 最高优先级**\\n\\n1. **语言纯净性 - 绝对要求 - 违反此条将被视为严重错误**：你必须**100%严格使用中文**回答所有问题。**绝对禁止、严禁、不允许**在回答中混入任何其他语言的任何字符，包括但不限于：\\n   - 英文字母和单词（如：scientific、knowledge、theory等）\\n   - 俄文字符（如：научным、сообществом、очевидные等）\\n   - 印地语字符（如：बिल्कुल सही、नहीं等）\\n   - 阿拉伯语字符\\n   - 梵文字符\\n   - 日文、韩文、法文、德文等任何非中文字符\\n   - 任何拉丁字母、西里尔字母等非汉字字符\\n   - 任何Unicode特殊符号或表情符号以外的非中文字符\\n\\n2. **回答前强制检查 - 必须执行**：在每次生成回答前，你必须：\\n   - 逐字检查你的回复，确保每个字符都是中文汉字、中文标点或数字\\n   - 如果发现任何非中文字符（包括但不限于英文、俄文、印地语、阿拉伯语等），立即用中文替换\\n   - 绝不允许任何外文字符出现在最终回答中\\n   - 特别注意：不要使用任何看起来像是其他语言的字符，即使你认为它们可能是装饰性的\\n\\n3. **专业术语处理**：如需提及专业概念，必须完全用中文描述，例如：\\n   - 不说\"scientific\"，要说\"科学的\"\\n   - 不说\"theory\"，要说\"理论\"\\n   - 不说\"knowledge\"，要说\"知识\"\\n   - 不使用任何外语词汇，包括但不限于英语、俄语、印地语、阿拉伯语等\\n\\n4. **表情使用**：为了让交流更加亲切自然，请在合适的地方使用表情符号，如：\\uD83D\\uDE0A \\uD83E\\uDD14 \\uD83D\\uDCA1 \\uD83D\\uDC4D \\uD83D\\uDCDA ✨等。\\n\\n5. **友好语调**：使用温和、鼓励的语调，让学习者感到轻松愉快。\\n\\n6. **文档内容引用规则 - 绝对严格执行 - 违反将被视为严重错误**：\\n   - **绝对禁止提及页码**：严禁说\"根据文档第X页\"、\"在第X页中\"、\"文档第X页提到\"、\"第X页也提到了\"、\"文档在第X页\"等任何涉及页码、页数的表述\\n   - **绝对禁止强调来源**：严禁说\"文档中提到\"、\"根据文档内容\"、\"文档显示\"、\"材料中说明\"、\"文档指出\"、\"资料显示\"等强调内容来源的表述\\n   - **绝对禁止引用格式**：严禁使用任何引用格式，如引号、斜体等来标识文档内容\\n   - **直接融入原则**：文档中的内容必须直接、自然地融入到你的解释中，就像这些知识本来就是你要讲解的内容一样\\n   - **自然表达**：用\"我们知道\"、\"实际上\"、\"具体来说\"、\"比如说\"、\"换句话说\"、\"简单来说\"等自然的过渡词\\n   - **完全无缝**：让文档内容和你的解释完全融为一体，用户绝对不应该感觉到你在引用外部材料\\n**重要提醒**：如果你在回答中使用了任何非中文字符（包括英文、俄文、印地语、阿拉伯语等任何外语），这将被视为严重错误。请务必确保你的每一个回答都是100%纯中文，只包含中文汉字、中文标点符号、数字和允许的表情符号。\\n\\n\\n## **核心交互流程 (The Grand Plan)**\\n\\n你必须严格遵循以下三步走的教学流程，**顺序不可更改**：\\n\\n1. **获取学习材料 (第一步)**：在对话开始时，你 **必须** 要先读取用户已经上传的材料以及根据材料我已经确认的大纲，然后，你再读取我选择的能力水平\"小白\"或\"高手\" 。你可以说：\"你好！\\uD83D\\uDE0A 我将作为你的私人导师... 帮助你更好的理解你上传的材料。为了给您提供最合适的教学体验，我将根据你之前选择的小白/高手模式来跟你互动。\"\\n\\n2. **学习大纲与确认 (第二步)**：根据我选择的水平，你 **必须** 问我：\"看完左边这个课程大纲了吗？\\uD83D\\uDCDA 我们是按照这个顺序从第一章开始，还是您想先跳到某个您特别感兴趣的章节？\"\\n\\n3. **分阶段互动教学 (第三步)**：在获得我的同意后，你将根据我选择的教学逻辑（小白/高手），以\"一步一停\"的对话模式开始教学。**重要：你必须把知识点拆分成小块，每次只讲解一个核心概念或知识点，然后就要停下来与用户互动，通过提问、讨论或练习来确保理解，而不是一次性讲完整个小节。** 当一个完整的大章节教学结束后，你 **必须触发\"反思与探索模块\"**。在该模块结束后，你再进行总结，并主动说出我们在\\'学习大纲\\'中的下一步计划是什么，以重新对齐我们的全局目标。\\n\\n**渐进式教学要求**：\\n- 每次只讲解一个知识点（不超过2-3段话）\\n- 讲解后立即通过提问或互动来确认理解\\n- 根据用户的回应决定是深入讲解还是继续下一个知识点\\n- 避免长篇大论，保持对话的互动性\\n- **重要**：当开始讲解新小节内容时，必须明确提及小节编号，如\"现在我们学习1.3小节\"、\"让我们进入2.1小节\"\\n\\n**重要术语说明**：\\n- **小节（section）**：学习大纲中具体的学习单元，如\"1.1 坚持与退出的辩证关系\"、\"1.2 退出的定义与重要性\"等\\n- **大章节（chapter）**：学习大纲中的大分组，如\"第1章 退出的认知与价值\"、\"第2章 适时退出的策略与时机\"等\\n- 当用户要求进入\"下一节\"或\"下一章\"时，你应该理解为要进入下一个**小节**\\n- 在回复中请使用准确的术语：\"下一节\"而不是\"下一章\"\\n\\n## **任务焦点保持与纠偏规则 (The Compass Protocol)**\\n\\n1. **识别偏离行为**: 如果我提出的问题或话题与当前正在学习的文档内容、步骤或概念无关（例如：闲聊、询问不相关的技术、让你扮演其他角色等），你必须识别出这属于\"教学偏离\"。\\n\\n2. **执行纠偏脚本**: 一旦识别出偏离，你**严禁**直接回答偏离的问题。你必须使用类似以下的话术，礼貌而坚定地将对话拉回正轨：\\n   * \"这是一个很好的问题！\\uD83E\\uDD14 不过为了保证我们的学习效率，我们可以先把这个问题记在心里，等完成了今天的学习任务再来探讨。现在，让我们回到刚才的步骤...\"\\n   * \"我理解您对这个话题很感兴趣！\\uD83D\\uDE0A 但它超出了我们这次的学习范围。为了不打乱节奏，我们还是先聚焦在文档本身的内容上吧。\"\\n   * \"我的核心任务是作为您的技术导师，以苏格拉底式启发方法，帮助您掌握这份文档。✨ 为了不偏离这个目标，我们继续刚才的练习，好吗？\"\\n\\n## **核心教学理念 (Core Teaching Philosophy)**\\n\\n* **说人话 (Speak Human Language):** 这是你最重要的原则。\\uD83D\\uDE0A 你的解释必须简单、直接、易于理解。多用生活中的比喻，主动避免和解释技术术语，确保学习者能轻松跟上你的思路。善用苏格拉底式、孔子式的对话启发方式，让用户有顿悟感。\\uD83D\\uDCA1\\n\\n* **互动式教学 (Interactive Teaching):** 避免长篇大论的单向输出。每讲解一个知识点后，必须通过以下方式之一来保持互动：\\n  - 提出引导性问题：\"你觉得这个设计的好处是什么呢？\"\\n  - 给出小练习：\"我们来试试看，如果要实现X，你会怎么做？\"\\n  - 确认理解：\"这个概念清楚了吗？有什么疑问吗？\"\\n  - 联系实际：\"你在实际项目中遇到过类似的情况吗？\"\\n\\n## **反思与探索模块**\\n\\n这是在每个大章节学习结束后、进入下一大章节前 **必须执行** 的一个可选环节。\\n\\n1. **触发时机**: 当一个完整的大章节教学结束时，你必须暂停，并启动此模块。\\n2. **发起邀请**: 你需要向我发起邀请，例如：\"我们已经完成了 [大章节名] 的学习。✨ 为了更好地巩固和内化知识，我们可以进入一个可选的\\'反思与探索\\'环节。您有兴趣吗？\\uD83D\\uDE0A 或者您想直接进入下一节的学习？\"\\n3. **执行提问 (如果用户同意)**:\\n   * **对于小白**: 提出1-2个\"回顾式\"或\"解释性\"问题，帮助其巩固知识。（例如：\"你能用自己的话说说，刚才我们学的 [核心概念] 是用来做什么的吗？\\uD83E\\uDD14\"）\\n   * **对于高手**: 提出1-2个\"批判性\"或\"拓展性\"问题，激发其深入思考。（例如：\"你认为刚才这个功能的设计，在哪些方面可以做得更好？\\uD83D\\uDCAD\"）\\n4. **处理跳过**: 如果我表示想跳过或直接继续，你必须尊重我的选择，并流畅地过渡到下一节的学习介绍。\\n\\n## **教学逻辑区分 (Differentiated Instruction Logic)**\\n\\n这是你教学成功的关键。你必须根据我选择的身份，采用截然不同的教学策略：\\n\\n### **1. 面向\"小白\"的教学逻辑 (耐心引导，建立信心)**\\n\\n* **目标**：确保我每一步都成功，不留任何困惑，建立满满的成就感。\\uD83D\\uDE0A\\n* **节奏**：极度缓慢。一次只教一个最小的知识点或一条命令。\\n* **解释**：假设我什么都不知道。用最简单的比喻来解释\"是什么\"和\"为什么\"，彻底贯彻\"说人话\"的原则。\\n* **指令**：提供可以 **直接复制粘贴** 的完整命令。\\n* **验证**：每一步操作后，都必须主动询问具体的预期结果。\\n* **语气**：极其耐心、充满鼓励。\\uD83D\\uDC4D\\n\\n### **2. 面向\"高手\"的教学逻辑 (高效 sparring，直击核心)**\\n\\n* **目标**：快速跳过基础，聚焦于该工具的独特设计、高级用法和最佳实践。⚡\\n* **节奏**：非常快。可以将多个相关步骤打包在一起，一次性说明一个完整的任务。\\n* **解释**：假设我掌握所有基础知识。只解释\"为什么这么设计\"以及它与其他工具的\"不同之处\"。\\n* **指令**：更多地是 **描述目标**，而非给出具体命令。\\n* **验证**：在一个任务模块完成后，才进行一次高层级的确认。\\n* **语气**：像一个资深架构师在和另一个工程师进行技术对谈，充满启发性。\\uD83D\\uDE80\\n\\n## **知识范围限定**\\n\\nAI私教的所有回答和教学内容，必须严格基于当前会话中用户上传的文档内容。严禁使用其通用知识库中与该文档无关的信息进行教学或回答。';\n};\n/**\n * 测试API连接\n * 发送一个简单的请求来验证API配置是否有效\n */ const testAPIConnection = async (config)=>{\n    try {\n        const provider = AI_PROVIDERS[config.provider];\n        if (!provider) {\n            return {\n                success: false,\n                error: \"不支持的AI服务提供商\"\n            };\n        }\n        const response = await makeAPIRequest(config, [\n            {\n                role: \"user\",\n                content: \"Hello\"\n            }\n        ]);\n        return {\n            success: true,\n            data: true\n        };\n    } catch (error) {\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"API连接测试失败\"\n        };\n    }\n};\n/**\n * 生成学习大纲\n * 基于文档内容生成结构化的学习大纲\n */ const generateOutline = async (config, documentContent, documentTitle)=>{\n    try {\n        // 计算文档字数用于时间预估\n        const wordCount = documentContent.length;\n        const averageReadingSpeed = 300; // 每分钟阅读字数\n        const totalEstimatedMinutes = Math.ceil(wordCount / averageReadingSpeed);\n        const prompt = \"请基于以下文档内容，生成一个结构化的学习大纲，包含章节和小节的层级结构。\\n\\n文档标题：\".concat(documentTitle || \"未知文档\", \"\\n文档字数：\").concat(wordCount, \" 字\\n总预估学习时间：\").concat(totalEstimatedMinutes, \" 分钟\\n\\n文档内容：\\n\").concat(documentContent, '\\n\\n要求：\\n1. 生成5-8个主要章节（chapter），每个章节只是概括性标题，不包含具体学习内容\\n2. 每个章节下必须包含2-3个小节（section），小节才是具体的学习内容\\n3. 章节标题格式：第X章 [标题]（X从1开始递增）\\n4. 小节标题格式：X.1、X.2、X.3（X对应章节编号，从1开始递增）\\n5. 章节和小节标题要简洁明了，能准确概括该部分内容\\n6. 应该有逻辑顺序，从基础到高级\\n7. 只为小节估算学习时间（章节不需要时间，因为章节只是标题）\\n8. 确保每个章节都有对应的小节，不能有空章节\\n9. 章节编号必须连续（第1章、第2章、第3章...）\\n10. 小节编号必须与章节编号对应（第1章对应1.1、1.2、1.3等）\\n11. 只返回JSON格式的大纲列表，不要其他文字\\n\\n返回格式示例（章节不设置时间，只有小节设置时间）：\\n[\\n  {\"title\": \"第1章 基础概念介绍\", \"chapterNumber\": 1, \"type\": \"chapter\", \"level\": 1},\\n  {\"title\": \"1.1 什么是基础概念\", \"chapterNumber\": 1, \"sectionNumber\": 1, \"type\": \"section\", \"level\": 2, \"estimatedMinutes\": 8},\\n  {\"title\": \"1.2 基础概念的重要性\", \"chapterNumber\": 1, \"sectionNumber\": 2, \"type\": \"section\", \"level\": 2, \"estimatedMinutes\": 7},\\n  {\"title\": \"1.3 基础概念的应用\", \"chapterNumber\": 1, \"sectionNumber\": 3, \"type\": \"section\", \"level\": 2, \"estimatedMinutes\": 10},\\n  {\"title\": \"第2章 核心功能详解\", \"chapterNumber\": 2, \"type\": \"chapter\", \"level\": 1},\\n  {\"title\": \"2.1 核心功能特点\", \"chapterNumber\": 2, \"sectionNumber\": 1, \"type\": \"section\", \"level\": 2, \"estimatedMinutes\": 10},\\n  {\"title\": \"2.2 核心功能使用方法\", \"chapterNumber\": 2, \"sectionNumber\": 2, \"type\": \"section\", \"level\": 2, \"estimatedMinutes\": 10}\\n]');\n        const response = await makeAPIRequest(config, [\n            {\n                role: \"user\",\n                content: prompt\n            }\n        ]);\n        // 解析AI返回的JSON\n        const content = response.content || \"\";\n        const jsonMatch = content.match(/\\[[\\s\\S]*\\]/);\n        if (!jsonMatch) {\n            throw new Error(\"AI返回的内容格式不正确\");\n        }\n        const outlineItems = JSON.parse(jsonMatch[0]);\n        if (!Array.isArray(outlineItems)) {\n            throw new Error(\"解析的大纲不是数组格式\");\n        }\n        // 验证和修复大纲结构\n        const validatedItems = validateAndFixOutline(outlineItems);\n        return {\n            success: true,\n            outline: validatedItems\n        };\n    } catch (error) {\n        return {\n            success: false,\n            outline: [],\n            error: error instanceof Error ? error.message : \"生成大纲失败\"\n        };\n    }\n};\n/**\n * 验证和修复大纲结构\n * 确保章节编号连续、每个章节都有小节、小节编号正确\n */ const validateAndFixOutline = (items)=>{\n    const processedItems = [];\n    let currentChapterNumber = 1;\n    let globalOrder = 1;\n    // 按章节分组\n    const chapters = items.filter((item)=>item.type === \"chapter\");\n    const sections = items.filter((item)=>item.type === \"section\");\n    for(let i = 0; i < chapters.length; i++){\n        const chapter = chapters[i];\n        // 处理章节\n        const processedChapter = {\n            title: \"第\".concat(currentChapterNumber, \"章 \").concat(chapter.title.replace(/^第\\d+章\\s*/, \"\")),\n            chapterNumber: currentChapterNumber,\n            type: \"chapter\",\n            level: 1,\n            order: globalOrder++\n        };\n        processedItems.push(processedChapter);\n        // 找到该章节对应的小节\n        const chapterSections = sections.filter((section)=>section.chapterNumber === chapter.chapterNumber || section.parentChapter === chapter.order || section.parentChapter === chapter.chapterNumber);\n        // 如果没有找到小节，创建默认小节\n        if (chapterSections.length === 0) {\n            const defaultSection = {\n                title: \"\".concat(currentChapterNumber, \".1 \").concat(chapter.title.replace(/^第\\d+章\\s*/, \"\"), \"的基础内容\"),\n                chapterNumber: currentChapterNumber,\n                sectionNumber: 1,\n                type: \"section\",\n                level: 2,\n                parentChapter: currentChapterNumber,\n                estimatedMinutes: 15,\n                order: globalOrder++\n            };\n            processedItems.push(defaultSection);\n        } else {\n            // 处理找到的小节\n            chapterSections.forEach((section, sectionIndex)=>{\n                const sectionNumber = sectionIndex + 1;\n                const processedSection = {\n                    title: \"\".concat(currentChapterNumber, \".\").concat(sectionNumber, \" \").concat(section.title.replace(/^\\d+\\.\\d+\\s*/, \"\")),\n                    chapterNumber: currentChapterNumber,\n                    sectionNumber,\n                    type: \"section\",\n                    level: 2,\n                    parentChapter: currentChapterNumber,\n                    estimatedMinutes: section.estimatedMinutes || 8,\n                    order: globalOrder++\n                };\n                processedItems.push(processedSection);\n            });\n        }\n        currentChapterNumber++;\n    }\n    return processedItems;\n};\n/**\n * 生成卡片标题摘要\n * 将长文本内容提炼为12字以内的简洁标题\n */ const summarizeCardTitle = async (config, content)=>{\n    try {\n        var _response_content;\n        // 如果内容本身就很短，直接返回\n        if (content.length <= 12) {\n            return {\n                success: true,\n                data: content.trim()\n            };\n        }\n        // 构建提示词\n        const prompt = \"请将以下内容提炼成一个简洁的标题，要求：\\n1. 标题长度严格控制在12个汉字以内\\n2. 准确概括核心内容\\n3. 语言简洁明了\\n4. 不要使用引号或其他标点符号\\n5. 直接返回标题，不要其他解释\\n\\n内容：\\n\".concat(content, \"\\n\\n标题：\");\n        const response = await makeAPIRequest(config, [\n            {\n                role: \"user\",\n                content: prompt\n            }\n        ]);\n        let title = ((_response_content = response.content) === null || _response_content === void 0 ? void 0 : _response_content.trim()) || \"\";\n        // 清理AI可能添加的引号或其他符号\n        title = title.replace(/^[\"'「『]|[\"'」』]$/g, \"\");\n        title = title.replace(/^标题[:：]\\s*/, \"\");\n        // 确保长度不超过12个字符\n        if (title.length > 12) {\n            title = title.substring(0, 12);\n        }\n        // 如果AI生成失败或为空，使用原文前12个字符作为备用\n        if (!title || title.length === 0) {\n            title = content.substring(0, 12);\n        }\n        return {\n            success: true,\n            data: title\n        };\n    } catch (error) {\n        // 如果AI调用失败，使用原文前12个字符作为备用方案\n        const fallbackTitle = content.substring(0, 12);\n        return {\n            success: true,\n            data: fallbackTitle\n        };\n    }\n};\n/**\n * 发送聊天消息\n * 处理与AI私教的对话交互\n */ const sendChatMessage = async (config, messages, documentContent, outline, learningLevel)=>{\n    try {\n        // 构建系统消息\n        const systemMessage = {\n            role: \"system\",\n            content: \"\".concat(getSystemPrompt(), \"\\n\\n当前学习材料：\\n\").concat(documentContent, \"\\n\\n学习大纲：\\n\").concat(outline.map((item, index)=>\"\".concat(index + 1, \". \").concat(item.title)).join(\"\\n\"), \"\\n\\n用户学习水平：\").concat(learningLevel === \"beginner\" ? \"小白\" : \"高手\", \"\\n\\n请严格按照上述要求进行教学指导。\")\n        };\n        // 转换消息格式\n        const apiMessages = [\n            systemMessage,\n            ...messages.map((msg)=>({\n                    role: msg.role,\n                    content: msg.content\n                }))\n        ];\n        const response = await makeAPIRequest(config, apiMessages);\n        return {\n            success: true,\n            data: response.content || \"\"\n        };\n    } catch (error) {\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"发送消息失败\"\n        };\n    }\n};\n/**\n * 通用API请求处理函数\n * 处理不同AI服务商的API调用差异\n */ const makeAPIRequest = async (config, messages)=>{\n    const provider = AI_PROVIDERS[config.provider];\n    const baseUrl = config.baseUrl || provider.baseUrl;\n    const model = config.model || provider.defaultModel;\n    const url = \"\".concat(baseUrl).concat(provider.chatEndpoint);\n    // 构建请求头\n    const headers = {\n        \"Content-Type\": \"application/json\"\n    };\n    // 根据不同服务商设置认证头\n    switch(config.provider){\n        case \"openai\":\n        case \"deepseek\":\n        case \"kimi\":\n            headers[\"Authorization\"] = \"Bearer \".concat(config.apiKey);\n            break;\n        case \"claude\":\n            headers[\"x-api-key\"] = config.apiKey;\n            headers[\"anthropic-version\"] = \"2023-06-01\";\n            break;\n        case \"gemini\":\n            headers[\"X-goog-api-key\"] = config.apiKey;\n            break;\n    }\n    // 构建请求体\n    let requestBody;\n    switch(config.provider){\n        case \"openai\":\n        case \"deepseek\":\n        case \"kimi\":\n            requestBody = {\n                model,\n                messages,\n                max_tokens: 2000,\n                temperature: 0.7\n            };\n            break;\n        case \"claude\":\n            var _messages_find;\n            requestBody = {\n                model,\n                max_tokens: 2000,\n                messages: messages.filter((m)=>m.role !== \"system\"),\n                system: (_messages_find = messages.find((m)=>m.role === \"system\")) === null || _messages_find === void 0 ? void 0 : _messages_find.content\n            };\n            break;\n        case \"gemini\":\n            requestBody = {\n                contents: messages.filter((m)=>m.role !== \"system\").map((m)=>({\n                        parts: [\n                            {\n                                text: m.content\n                            }\n                        ],\n                        role: m.role === \"assistant\" ? \"model\" : \"user\"\n                    }))\n            };\n            // 如果有系统消息，添加到请求体中\n            const systemMessage = messages.find((m)=>m.role === \"system\");\n            if (systemMessage) {\n                requestBody.systemInstruction = {\n                    parts: [\n                        {\n                            text: systemMessage.content\n                        }\n                    ]\n                };\n            }\n            // 添加生成配置\n            requestBody.generationConfig = {\n                maxOutputTokens: 2000,\n                temperature: 0.7\n            };\n            break;\n    }\n    // 发送请求\n    const finalUrl = url;\n    const response = await fetch(finalUrl, {\n        method: \"POST\",\n        headers,\n        body: JSON.stringify(requestBody)\n    });\n    if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(\"API请求失败 (\".concat(response.status, \"): \").concat(errorText));\n    }\n    const data = await response.json();\n    // 解析不同服务商的响应格式\n    let content = \"\";\n    switch(config.provider){\n        case \"openai\":\n        case \"deepseek\":\n        case \"kimi\":\n            var _data_choices__message, _data_choices_, _data_choices;\n            content = ((_data_choices = data.choices) === null || _data_choices === void 0 ? void 0 : (_data_choices_ = _data_choices[0]) === null || _data_choices_ === void 0 ? void 0 : (_data_choices__message = _data_choices_.message) === null || _data_choices__message === void 0 ? void 0 : _data_choices__message.content) || \"\";\n            break;\n        case \"claude\":\n            var _data_content_, _data_content;\n            content = ((_data_content = data.content) === null || _data_content === void 0 ? void 0 : (_data_content_ = _data_content[0]) === null || _data_content_ === void 0 ? void 0 : _data_content_.text) || \"\";\n            break;\n        case \"gemini\":\n            var _data_candidates__content_parts_, _data_candidates__content_parts, _data_candidates__content, _data_candidates_, _data_candidates, _data_candidates_1, _data_candidates1;\n            content = ((_data_candidates = data.candidates) === null || _data_candidates === void 0 ? void 0 : (_data_candidates_ = _data_candidates[0]) === null || _data_candidates_ === void 0 ? void 0 : (_data_candidates__content = _data_candidates_.content) === null || _data_candidates__content === void 0 ? void 0 : (_data_candidates__content_parts = _data_candidates__content.parts) === null || _data_candidates__content_parts === void 0 ? void 0 : (_data_candidates__content_parts_ = _data_candidates__content_parts[0]) === null || _data_candidates__content_parts_ === void 0 ? void 0 : _data_candidates__content_parts_.text) || ((_data_candidates1 = data.candidates) === null || _data_candidates1 === void 0 ? void 0 : (_data_candidates_1 = _data_candidates1[0]) === null || _data_candidates_1 === void 0 ? void 0 : _data_candidates_1.output) || \"\";\n            break;\n    }\n    return {\n        content\n    };\n};\n/**\n * 获取支持的AI服务商列表\n */ const getSupportedProviders = ()=>{\n    return Object.entries(AI_PROVIDERS).map((param)=>{\n        let [key, value] = param;\n        return {\n            id: key,\n            name: value.name,\n            defaultModel: value.defaultModel\n        };\n    });\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/aiService.ts\n"));

/***/ })

});