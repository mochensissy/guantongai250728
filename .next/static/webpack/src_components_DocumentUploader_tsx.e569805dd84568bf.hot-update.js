"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src_components_DocumentUploader_tsx",{

/***/ "./src/utils/documentParser.ts":
/*!*************************************!*\
  !*** ./src/utils/documentParser.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseDocument: function() { return /* binding */ parseDocument; },\n/* harmony export */   validateParseResult: function() { return /* binding */ validateParseResult; }\n/* harmony export */ });\n/**\n * 文档解析工具类\n * \n * 支持多种文档格式的解析：\n * - URL网页内容抓取\n * - PDF文档解析\n * - Word文档解析\n * - PowerPoint演示文稿解析\n * - Markdown文档解析\n * - 纯文本文档处理\n */ /**\n * 通用文档解析函数\n * 根据文件类型或URL自动选择合适的解析方法\n */ const parseDocument = async (input, type)=>{\n    try {\n        // 如果输入是字符串，判断是URL还是文本内容\n        if (typeof input === \"string\") {\n            if (type === \"url\" || isValidURL(input)) {\n                return await parseURL(input);\n            } else if (type === \"markdown\" || input.includes(\"# \") || input.includes(\"## \")) {\n                return parseMarkdown(input);\n            } else {\n                return parseText(input);\n            }\n        }\n        // 如果输入是文件，根据文件类型选择解析方法\n        const fileType = type || getFileTypeFromFile(input);\n        switch(fileType){\n            case \"pdf\":\n                return await parsePDF(input);\n            case \"word\":\n                return await parseWord(input);\n            case \"ppt\":\n                return await parsePowerPoint(input);\n            case \"markdown\":\n                const markdownContent = await readFileAsText(input);\n                return parseMarkdown(markdownContent);\n            case \"text\":\n            default:\n                const textContent = await readFileAsText(input);\n                return parseText(textContent);\n        }\n    } catch (error) {\n        console.error(\"文档解析失败:\", error);\n        return {\n            success: false,\n            content: \"\",\n            error: error instanceof Error ? error.message : \"未知解析错误\"\n        };\n    }\n};\n/**\n * 判断字符串是否为有效URL\n */ const isValidURL = (string)=>{\n    try {\n        new URL(string);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n/**\n * 从文件对象推断文件类型\n */ const getFileTypeFromFile = (file)=>{\n    var _file_name_split_pop;\n    const extension = (_file_name_split_pop = file.name.split(\".\").pop()) === null || _file_name_split_pop === void 0 ? void 0 : _file_name_split_pop.toLowerCase();\n    const mimeType = file.type.toLowerCase();\n    if (extension === \"pdf\" || mimeType.includes(\"pdf\")) {\n        return \"pdf\";\n    }\n    if (extension === \"docx\" || extension === \"doc\" || mimeType.includes(\"word\")) {\n        return \"word\";\n    }\n    if (extension === \"pptx\" || extension === \"ppt\" || mimeType.includes(\"presentation\")) {\n        return \"ppt\";\n    }\n    if (extension === \"md\" || extension === \"markdown\") {\n        return \"markdown\";\n    }\n    return \"text\";\n};\n/**\n * 将文件读取为文本内容\n */ const readFileAsText = (file)=>{\n    return new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onload = (e)=>{\n            var _e_target;\n            return resolve(((_e_target = e.target) === null || _e_target === void 0 ? void 0 : _e_target.result) || \"\");\n        };\n        reader.onerror = (e)=>reject(new Error(\"文件读取失败\"));\n        reader.readAsText(file, \"UTF-8\");\n    });\n};\n/**\n * 解析URL内容\n * 使用多个代理服务轮询，提高成功率\n */ const parseURL = async (url)=>{\n    // 多个代理服务，按优先级排序\n    const proxyServices = [\n        // 方法1: cors-anywhere (需要先访问 https://cors-anywhere.herokuapp.com/corsdemo 激活)\n        \"https://cors-anywhere.herokuapp.com/\".concat(url),\n        // 方法2: AllOrigins\n        \"https://api.allorigins.win/get?url=\".concat(encodeURIComponent(url)),\n        // 方法3: corsproxy.io\n        \"https://corsproxy.io/?\".concat(encodeURIComponent(url)),\n        // 方法4: 尝试直接访问（某些情况下可能有效）\n        url\n    ];\n    let lastError = \"\";\n    let html = \"\";\n    try {\n        // 轮询尝试各个代理服务\n        for(let i = 0; i < proxyServices.length; i++){\n            try {\n                const proxyUrl = proxyServices[i];\n                console.log(\"尝试代理服务 \".concat(i + 1, \"/\").concat(proxyServices.length, \": \").concat(proxyUrl));\n                const response = await fetch(proxyUrl, {\n                    method: \"GET\",\n                    headers: {\n                        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\"\n                    },\n                    // 设置超时\n                    signal: AbortSignal.timeout(10000)\n                });\n                if (!response.ok) {\n                    throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n                }\n                // 处理不同代理服务的响应格式\n                if (i === 1) {\n                    // AllOrigins 返回 JSON 格式\n                    const data = await response.json();\n                    if (data.contents && data.contents.trim()) {\n                        html = data.contents;\n                        break;\n                    } else {\n                        throw new Error(\"代理服务返回空内容\");\n                    }\n                } else {\n                    // 其他服务直接返回HTML\n                    const responseText = await response.text();\n                    if (responseText && responseText.trim().length > 100) {\n                        html = responseText;\n                        break;\n                    } else {\n                        throw new Error(\"返回内容过短或为空\");\n                    }\n                }\n            } catch (error) {\n                const errorMsg = error instanceof Error ? error.message : \"未知错误\";\n                lastError = \"代理服务 \".concat(i + 1, \" 失败: \").concat(errorMsg);\n                console.warn(lastError);\n                // 如果不是最后一个服务，继续尝试下一个\n                if (i < proxyServices.length - 1) {\n                    continue;\n                }\n            }\n        }\n        // 如果所有代理都失败了\n        if (!html) {\n            throw new Error(\"所有代理服务都无法访问该URL。最后错误: \".concat(lastError));\n        }\n        // 简单的HTML文本提取（实际项目中可能需要更复杂的解析）\n        const textContent = extractTextFromHTML(html);\n        const title = extractTitleFromHTML(html);\n        // 验证提取的内容\n        if (!textContent || textContent.trim().length < 50) {\n            throw new Error(\"提取的文本内容过少，可能是动态加载页面或被反爬虫保护\");\n        }\n        return {\n            success: true,\n            content: textContent,\n            title,\n            metadata: {\n                wordCount: textContent.split(/\\s+/).length,\n                source: \"url\",\n                originalUrl: url\n            }\n        };\n    } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : \"未知错误\";\n        // 提供更详细的错误信息和解决建议\n        let userFriendlyMessage = \"URL解析失败: \".concat(errorMessage);\n        if (errorMessage.includes(\"CORS\")) {\n            userFriendlyMessage += '\\n\\n\\uD83D\\uDCA1 解决建议：由于浏览器安全限制，某些网站无法直接访问。请尝试：\\n1. 复制网页内容，使用\"文本粘贴\"功能\\n2. 或者尝试其他公开可访问的URL';\n        } else if (errorMessage.includes(\"timeout\") || errorMessage.includes(\"超时\")) {\n            userFriendlyMessage += \"\\n\\n\\uD83D\\uDCA1 解决建议：网络超时，请检查网络连接或稍后重试\";\n        } else if (errorMessage.includes(\"404\") || errorMessage.includes(\"Not Found\")) {\n            userFriendlyMessage += \"\\n\\n\\uD83D\\uDCA1 解决建议：URL不存在，请检查链接是否正确\";\n        } else if (errorMessage.includes(\"动态加载\") || errorMessage.includes(\"反爬虫\")) {\n            userFriendlyMessage += '\\n\\n\\uD83D\\uDCA1 解决建议：该网站使用了动态加载或反爬虫保护。请手动复制网页内容，然后使用\"文本粘贴\"功能';\n        }\n        return {\n            success: false,\n            content: \"\",\n            error: userFriendlyMessage\n        };\n    }\n};\n/**\n * 从HTML中提取纯文本内容\n */ const extractTextFromHTML = (html)=>{\n    try {\n        // 创建一个临时DOM元素来解析HTML\n        const tempDiv = document.createElement(\"div\");\n        tempDiv.innerHTML = html;\n        // 移除script和style标签\n        const scripts = tempDiv.querySelectorAll(\"script, style, nav, header, footer, aside\");\n        scripts.forEach((el)=>el.remove());\n        // 移除广告和无关内容\n        const ads = tempDiv.querySelectorAll('[class*=\"ad\"], [id*=\"ad\"], [class*=\"advertisement\"]');\n        ads.forEach((el)=>el.remove());\n        // 提取文本内容\n        let textContent = tempDiv.textContent || tempDiv.innerText || \"\";\n        // 清理文本：移除多余空白和换行\n        textContent = textContent.replace(/\\s+/g, \" \") // 多个空白字符替换为单个空格\n        .replace(/\\n\\s*\\n/g, \"\\n\\n\") // 多个换行替换为双换行\n        .trim();\n        return textContent;\n    } catch (error) {\n        console.error(\"HTML文本提取失败:\", error);\n        // 如果DOM解析失败，使用正则表达式简单清理\n        return html.replace(/<script[^>]*>[\\s\\S]*?<\\/script>/gi, \"\").replace(/<style[^>]*>[\\s\\S]*?<\\/style>/gi, \"\").replace(/<[^>]+>/g, \"\").replace(/\\s+/g, \" \").trim();\n    }\n};\n/**\n * 从HTML中提取标题\n */ const extractTitleFromHTML = (html)=>{\n    // 尝试多种方式提取标题\n    // 方法1: 标准的 <title> 标签\n    let titleMatch = html.match(RegExp(\"<title[^>]*>(.*?)<\\\\/title>\", \"is\"));\n    if (titleMatch && titleMatch[1].trim()) {\n        const title = titleMatch[1].trim().replace(/&amp;/g, \"&\").replace(/&lt;/g, \"<\").replace(/&gt;/g, \">\").replace(/&quot;/g, '\"').replace(/&#39;/g, \"'\").replace(/&nbsp;/g, \" \");\n        console.log(\"从 <title> 标签提取到标题:\", title);\n        return title;\n    }\n    // 方法2: Open Graph 标题\n    titleMatch = html.match(/<meta[^>]*property=\"og:title\"[^>]*content=\"([^\"]*)\"[^>]*>/i);\n    if (titleMatch && titleMatch[1].trim()) {\n        const title = titleMatch[1].trim();\n        console.log(\"从 og:title 提取到标题:\", title);\n        return title;\n    }\n    // 方法3: Twitter Card 标题\n    titleMatch = html.match(/<meta[^>]*name=\"twitter:title\"[^>]*content=\"([^\"]*)\"[^>]*>/i);\n    if (titleMatch && titleMatch[1].trim()) {\n        const title = titleMatch[1].trim();\n        console.log(\"从 twitter:title 提取到标题:\", title);\n        return title;\n    }\n    // 方法4: 第一个 h1 标签\n    titleMatch = html.match(RegExp(\"<h1[^>]*>(.*?)<\\\\/h1>\", \"is\"));\n    if (titleMatch && titleMatch[1].trim()) {\n        // 移除HTML标签\n        const title = titleMatch[1].replace(/<[^>]*>/g, \"\").trim();\n        if (title.length > 0 && title.length < 200) {\n            console.log(\"从 h1 标签提取到标题:\", title);\n            return title;\n        }\n    }\n    // 方法5: 从URL中提取文件名（作为最后的备选方案）\n    console.log(\"所有标题提取方法都失败了，返回空字符串\");\n    return \"\";\n};\n/**\n * 解析PDF文档\n * 使用pdf.js库来提取PDF中的文本内容\n */ const parsePDF = async (file)=>{\n    try {\n        // 使用CDN版本的PDF.js worker来避免构建问题\n        const pdfjs = await __webpack_require__.e(/*! import() */ \"node_modules_pdfjs-dist_legacy_build_pdf_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! pdfjs-dist/legacy/build/pdf.js */ \"./node_modules/pdfjs-dist/legacy/build/pdf.js\", 23));\n        // 设置worker路径\n        pdfjs.GlobalWorkerOptions.workerSrc = \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\n        const arrayBuffer = await file.arrayBuffer();\n        const pdf = await pdfjs.getDocument({\n            data: arrayBuffer\n        }).promise;\n        let fullText = \"\";\n        // 逐页提取文本\n        for(let i = 1; i <= pdf.numPages; i++){\n            const page = await pdf.getPage(i);\n            const textContent = await page.getTextContent();\n            const pageText = textContent.items.filter((item)=>\"str\" in item).map((item)=>item.str).join(\" \");\n            fullText += pageText + \"\\n\\n\";\n        }\n        return {\n            success: true,\n            content: fullText.trim(),\n            title: file.name.replace(/\\.[^/.]+$/, \"\"),\n            metadata: {\n                pageCount: pdf.numPages,\n                wordCount: fullText.split(/\\s+/).length\n            }\n        };\n    } catch (error) {\n        return {\n            success: false,\n            content: \"\",\n            error: \"PDF解析失败: \".concat(error instanceof Error ? error.message : \"未知错误\")\n        };\n    }\n};\n/**\n * 解析Word文档\n * 使用mammoth.js库来处理.docx文件\n */ const parseWord = async (file)=>{\n    try {\n        // 动态导入mammoth，处理可能的导入错误\n        let mammoth;\n        try {\n            mammoth = await __webpack_require__.e(/*! import() */ \"node_modules_mammoth_lib_index_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! mammoth */ \"./node_modules/mammoth/lib/index.js\", 19));\n        } catch (error) {\n            throw new Error(\"Word文档解析库加载失败，请刷新页面重试\");\n        }\n        const arrayBuffer = await file.arrayBuffer();\n        const result = await mammoth.extractRawText({\n            arrayBuffer\n        });\n        return {\n            success: true,\n            content: result.value,\n            title: file.name.replace(/\\.[^/.]+$/, \"\"),\n            metadata: {\n                wordCount: result.value.split(/\\s+/).length\n            }\n        };\n    } catch (error) {\n        return {\n            success: false,\n            content: \"\",\n            error: \"Word文档解析失败: \".concat(error instanceof Error ? error.message : \"未知错误\")\n        };\n    }\n};\n/**\n * 解析PowerPoint演示文稿\n * 使用JSZip来提取.pptx文件中的文本内容\n */ const parsePowerPoint = async (file)=>{\n    try {\n        // 动态导入JSZip，处理可能的导入错误\n        let JSZip;\n        try {\n            JSZip = (await __webpack_require__.e(/*! import() */ \"node_modules_jszip_dist_jszip_min_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! jszip */ \"./node_modules/jszip/dist/jszip.min.js\", 23))).default;\n        } catch (error) {\n            throw new Error(\"PowerPoint解析库加载失败，请刷新页面重试\");\n        }\n        const arrayBuffer = await file.arrayBuffer();\n        const zip = await JSZip.loadAsync(arrayBuffer);\n        let fullText = \"\";\n        let slideCount = 0;\n        // 遍历所有幻灯片文件\n        const slideFiles = Object.keys(zip.files).filter((name)=>name.match(/ppt\\/slides\\/slide\\d+\\.xml/));\n        for (const slideFile of slideFiles){\n            const slideXml = await zip.files[slideFile].async(\"text\");\n            const slideText = extractTextFromXML(slideXml);\n            if (slideText.trim()) {\n                fullText += \"幻灯片 \".concat(slideCount + 1, \":\\n\").concat(slideText, \"\\n\\n\");\n                slideCount++;\n            }\n        }\n        return {\n            success: true,\n            content: fullText.trim(),\n            title: file.name.replace(/\\.[^/.]+$/, \"\"),\n            metadata: {\n                pageCount: slideCount,\n                wordCount: fullText.split(/\\s+/).length\n            }\n        };\n    } catch (error) {\n        return {\n            success: false,\n            content: \"\",\n            error: \"PowerPoint解析失败: \".concat(error instanceof Error ? error.message : \"未知错误\")\n        };\n    }\n};\n/**\n * 从XML中提取文本内容\n */ const extractTextFromXML = (xml)=>{\n    // 使用正则表达式提取文本内容\n    const textMatches = xml.match(/<a:t[^>]*>([^<]*)<\\/a:t>/g);\n    if (!textMatches) return \"\";\n    return textMatches.map((match)=>match.replace(/<[^>]*>/g, \"\")).join(\" \").trim();\n};\n/**\n * 解析Markdown文档\n */ const parseMarkdown = (content)=>{\n    try {\n        // 移除Markdown语法，保留纯文本\n        const plainText = content.replace(/#{1,6}\\s+/g, \"\") // 移除标题标记\n        .replace(/\\*\\*(.*?)\\*\\*/g, \"$1\") // 移除粗体标记\n        .replace(/\\*(.*?)\\*/g, \"$1\") // 移除斜体标记\n        .replace(/`(.*?)`/g, \"$1\") // 移除代码标记\n        .replace(/\\[(.*?)\\]\\(.*?\\)/g, \"$1\") // 移除链接，保留文本\n        .replace(/^\\s*[-*+]\\s+/gm, \"\") // 移除列表标记\n        .replace(/^\\s*\\d+\\.\\s+/gm, \"\") // 移除数字列表标记\n        .replace(/^\\s*>\\s+/gm, \"\") // 移除引用标记\n        .trim();\n        // 尝试提取标题（第一个一级标题）\n        const titleMatch = content.match(/^#\\s+(.+)$/m);\n        const title = titleMatch ? titleMatch[1] : \"\";\n        return {\n            success: true,\n            content: plainText,\n            title,\n            metadata: {\n                wordCount: plainText.split(/\\s+/).length\n            }\n        };\n    } catch (error) {\n        return {\n            success: false,\n            content: \"\",\n            error: \"Markdown解析失败: \".concat(error instanceof Error ? error.message : \"未知错误\")\n        };\n    }\n};\n/**\n * 解析纯文本内容\n */ const parseText = (content)=>{\n    const trimmedContent = content.trim();\n    return {\n        success: true,\n        content: trimmedContent,\n        metadata: {\n            wordCount: trimmedContent.split(/\\s+/).length\n        }\n    };\n};\n/**\n * 验证解析结果的质量\n * 检查内容是否足够用于生成学习大纲\n */ const validateParseResult = (result)=>{\n    if (!result.success || !result.content) {\n        return false;\n    }\n    // 检查内容长度（至少100个字符）\n    if (result.content.length < 100) {\n        return false;\n    }\n    // 检查是否有实际的文字内容（不只是空白字符）\n    const meaningfulContent = result.content.replace(/\\s+/g, \" \").trim();\n    if (meaningfulContent.length < 50) {\n        return false;\n    }\n    return true;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/documentParser.ts\n"));

/***/ })

});